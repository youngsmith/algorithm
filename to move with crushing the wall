/* https://www.acmicpc.net/problem/2206 
this problem is very similar to "a monkey that wants to be a horse" problem.
we need 3d visited array.
*/

#include<iostream>
#include<queue>

using namespace std;

int dir[4][2] = { {1,0},{0,1},{-1,0},{0,-1} };
typedef struct pos {
	int _y;
	int _x;
	int k;
	int cnt;
	pos(int a, int b, int c, int d) {
		_y = a, _x = b, cnt = c, k = d;
	}
}pos;

bool visited[1001][1001][2] = { false };
queue<pos> q;
char** map;
int n, m;

int main(void) {
	cin >> n >> m;

	map = new char*[n];
	for (int i = 0; i < n; i++) {
		map[i] = new char[m];
	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
		}

	q.push(pos(0, 0, 1, 1));
	visited[0][0][1] = true;
	while (!q.empty()) {
		pos p = q.front();
		q.pop();

		for (int i = 0; i < 4; i++) {
			int new_y = p._y + dir[i][0], new_x = p._x + dir[i][1];
			if (new_y >= 0 && new_y < n && new_x >= 0 && new_x < m) {
				if (map[new_y][new_x] == '1') {
					if (!p.k) continue;
					if (visited[new_y][new_x][p.k-1]) continue;
					if (new_y == n - 1 && new_x == m - 1) {
						cout << p.cnt + 1 << endl; return 0;
					}
					visited[new_y][new_x][p.k-1] = true;
					q.push(pos(new_y, new_x, p.cnt + 1, p.k - 1));
				}
				else if (!visited[new_y][new_x][p.k]) {
					if (new_y == n - 1 && new_x == m - 1) {
						cout << p.cnt + 1 << endl; return 0;
					}
					visited[new_y][new_x][p.k] = true;
					q.push(pos(new_y, new_x, p.cnt + 1, p.k));
				}
			}
		}

	}

	cout << -1 << endl;

	return 0;
}
